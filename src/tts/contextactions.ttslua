
function alignPiecesByShape(origin, objects, allowRotate)
	local nubinfo = templateData[gameState.templateId].nubinfo

	if nubinfo == nil then 
		return false
	end

  local spacing = getPieceSpacing(objects, true)
  local groups = {}

	--- mumpy.roll(), but for 4 character strings
	function rotateString(shape, rot)
		local ret = ""
		for i=0, 3 do
			local idx = (i + rot) % 4 + 1
			ret = ret .. shape:sub(idx, idx)
		end
		return ret
	end

  for i, obj in ipairs(objects) do
		local id = getPieceId(obj)
    local shape = nubinfo[id] or "????"

		-- take into account the rotation
		local rot = (math.floor(-obj.getRotation().y / 90 + 4.5) + 2) % 4

		local currentShape = rotateString(shape, rot)

		-- print("Shape is " .. shape .. " and spin is " .. obj.getRotation().y .. " so active shape is " .. currentShape)

		-- record result
    groups[currentShape] = groups[currentShape] or {}
    table.insert(groups[currentShape], obj)
  end

	if allowRotate then
		local targetGroups = {
			"oooo", "ooio", "oioi", "ooii",
			"oiii", "iiii",
		}

		--- Returns how many steps to rotate a by to get b. false if you can't.
		function shapeCanRotate(a, b)
			if a == b then return 0 end
			for shift=1,3 do
				if rotateString(a, shift) == b then return shift end
			end
			return false
		end

		for groupName, pieces in pairs(groups) do
			local rot = false
			local transferGroup = nil
			-- Check to see if there's a targetGroup we can rotate this group into:
			for _, targetGroup in ipairs(targetGroups) do
				rot = shapeCanRotate(groupName, targetGroup)
				if rot ~= false then
					transferGroup = targetGroup
					break
				end
			end

			if rot == 0 then
				-- We are the target group, no-op
			elseif rot ~= false then
				-- We can rotate this to match a the target group ("transferGroup")
				groups[transferGroup] = groups[transferGroup] or {}
				groups[groupName] = {}

				-- Spin pieces and move them to the other group
				for _, piece in ipairs(pieces) do
					local spin = piece.getRotation().y
					spin = spin + -rot * 90

					piece.setRotationSmooth(Vector(0, spin, 0), false, true)
					table.insert(groups[transferGroup], piece)
				end
			end
		end
	end

	-- determine what order to arrange them
	local groupList = {}
	for name, _ in pairs(groups) do table.insert(groupList, name) end
	table.sort(groupList, function(a, b) return a > b end)

	-- Arrange
  local row = 0
  for _, groupName in ipairs(groupList) do
    for i, obj in ipairs(groups[groupName]) do
      setPieceCenter(obj, {origin.x + (i - 1) * spacing, origin.y, origin.z - row * spacing}, false)
    end

		if #groups[groupName] > 0 then row = row + 1 end
  end

	return true
end

function addObjectsActions()
  for index, object in ipairs(getObjects()) do
    if getPiece(object) then
      addPieceActions(object)
    elseif isBoard(object) then
      addBoardActions(object)
    end
  end
end

function addPieceActions(obj)

	function doSquareAlign(focusedObj, objects)
    local helper = getOverlapHelper(objects)

    helper.setOriginByObject(focusedObj)
    helper.targetObjects(objects)
    local width = math.ceil(math.sqrt(helper.piecesArea))

    local i = 0
    local placementStepper = function()
      i = i + 1
      return {x = (i - 1) % width, z = math.floor((i - 1) / width)}
    end
    helper.placePieces(objects, placementStepper)

    -- for i, obj in ipairs(objects) do
    --   helper.placePiece(obj, (i - 1) % width, math.floor((i - 1) / width))
    -- end
	end

  function squareAlign(color, pos, focusedObj)
    local objects = Player[color].getSelectedObjects()
    inplaceShuffle(objects)
		doSquareAlign(focusedObj, objects)
  end
  obj.addContextMenuItem("Arrange: Square", squareAlign)

  function rowAlign(color, pos, focusedObj)
    local objects = Player[color].getSelectedObjects()
    inplaceShuffle(objects)
    local spacing = getPieceSpacing(objects, false)

    local p0 = focusedObj.getPosition()

    for i, obj in ipairs(objects) do
      setPieceCenter(obj, {p0.x + (i - 1) * spacing, p0.y, p0.z}, false)
    end
  end
  obj.addContextMenuItem("Arrange: Row", rowAlign)

	-- Only supported on square puzzles:
	if (templateData[gameState.templateId].shape or "square") == "square" then
		function noNubinfoApologize(player) 
			player.showInfoDialog("Sorry, nub/tab data isn't available.")
		end
		function shapeAlign(color, pos, focusedObj)
			local objects = Player[color].getSelectedObjects()
			inplaceShuffle(objects)
			local ret = alignPiecesByShape(focusedObj.getPosition(), objects, false)
			if ret == false then noNubinfoApologize(Player[color]) end
		end
		obj.addContextMenuItem("Arrange: By Shape", shapeAlign)
		
		function shapeSpinAlign(color, pos, focusedObj)
			local objects = Player[color].getSelectedObjects()
			inplaceShuffle(objects)
	
			local ret = alignPiecesByShape(focusedObj.getPosition(), objects, true)
			if ret == false then noNubinfoApologize(Player[color]) end
		end
		obj.addContextMenuItem("Arr & Rot: By Shape", shapeSpinAlign)
	end

  function gridAlign(color, pos, focusedObj)
    local objects = Player[color].getSelectedObjects()
    local spacing = getPieceSpacing(objects, true)
    local origin = Vector(pos)

    for i, obj in ipairs(objects) do
      p = obj.getPosition()
      p.x = math.floor((p.x - origin.x) / spacing + .5) * spacing + origin.x
      p.z = math.floor((p.z - origin.z) / spacing + .5) * spacing + origin.z
      setPieceCenter(obj, p, false)
    end
  end
  obj.addContextMenuItem("Align: Local grid", gridAlign)

  function solveAlign(color, pos, focusedObj)
    local objects = Player[color].getSelectedObjects()

    for i, obj in ipairs(objects) do
      local piece = getPiece(obj)
      if piece then
        obj.setRotationSmooth(piece.solutionRotation)
      end
    end

    broadcastToAll("Cheat: " .. Player[color].steam_name .. " rotated " .. #objects .. " piece(s) the right way.")
  end
  obj.addContextMenuItem("Cheat: Rotate Solved", solveAlign)

  function solveOrdering(color, pos, focusedObj)
    local objects = Player[color].getSelectedObjects()
		table.sort(objects, function(a, b)
			return getPieceId(a) - getPieceId(b) < 0
		end)
		doSquareAlign(focusedObj, objects)

    broadcastToAll("Cheat: " .. Player[color].steam_name .. " sorted " .. #objects .. " piece(s) to the puzzle order.")
  end
  obj.addContextMenuItem("Cheat: Puzzle Order", solveOrdering)
end

function addBoardActions(board)
  function changeTableColor(color, pos, focusedObj)
    function colorPicked(pickedColor, playerColor)
      for i, obj in pairs(tableSurfaces) do
        local settings = obj.getCustomObject()
        settings.diffuse = ""
        obj.setCustomObject(settings)

        obj.setColorTint(pickedColor)

        tableSurfaces[i] = obj.reload()
        tableSurfaces[i].interactable = false
      end
    end
    Player[color].showColorDialog(tableSurfaces[0].getColorTint(), colorPicked)
  end
  board.addContextMenuItem("Change table color", changeTableColor)


  function selectEdges(color, pos, focusedObj)
    Player[color].clearSelectedObjects()

    local edgeObjects = {}

    for pieceId, info in pairs(templateData[gameState.templateId].pieces) do
      if #info.neighbors <= 5 and gameState.pieces[pieceId].joinedTo == nil then
        local piece = getPiece(pieceId)
        if piece and piece.object ~= nil and piece.object.locked == false then
          table.insert(edgeObjects, piece.object)
        end
      end
    end

    inplaceShuffle(edgeObjects)
    for i, object in ipairs(edgeObjects) do
      object.addToPlayerSelection(color)
    end

    broadcastToAll("Cheat: " .. Player[color].steam_name .. " selected edges.")
  end
  board.addContextMenuItem("Cheat: Select edges", selectEdges)

  local lastPiecePick = nil
  function gatherPieces(color, pos, focusedObj)
    -- todo: may only work right for rectangular puzzles
    local player = Player[color]

    
    --Try to figure out where on the puzzle they clicked
    -- `pos` only seems to give us the center of the thing we right-clicked on
    --Look at the mouse pointer?
    --Wait, no, it's not useful because the pointer is already not where they opened the context menu,
    --but where they clicked on the menu.
    --[[
    local pointerPos = player.getPointerPosition()
    local bounds = focusedObj.getBoundsNormalized()
    bounds.left = bounds.center.x - bounds.size.x / 2
    bounds.right = bounds.center.x + bounds.size.x / 2
    bounds.far = bounds.center.z + bounds.size.z / 2
    bounds.near = bounds.center.z - bounds.size.z / 2
    
    local puzzlePos = {
      x = (pointerPos.x - bounds.left) / bounds.size.x,
      y = (pointerPos.z - bounds.near) / bounds.size.z,
    }
    
    log("Pointer is at " .. printTable(pointerPos, true))
    log("Bounds are " .. printTable(bounds, true))
    log("puzzlePos " .. printTable(puzzlePos, true))
    log("pos " .. printTable(pos, true))
    debugDrawLine({
      points = {pos, {pos.x, pos.y + 5, pos.z}},
      color = {1, 0, 0},
      thickness = .1,
    })
    --]]

    local bounds = focusedObj.getBounds()

    local hits = Physics.cast({
      origin = bounds.center,
      direction = focusedObj.getTransformUp(),
      type = 3,--box
      size = bounds.size,
      -- debug = true,
    })

    local piece = nil
    for i, hit in ipairs(hits) do
      if getPiece(hit.hit_object) then
        piece = getPiece(hit.hit_object)
      end
    end

    if not piece then
      player.showInfoDialog("Place a piece on top of the puzzle")
    else
      lastPiecePick = piece
      -- log("regarding piece at " .. printTable(lastPiecePick.solutionPosition, true))
      player.showInputDialog("Collect how far from this piece? (Try again if it doens't work the first time.)", "10", countConfirmed)
    end

    function countConfirmed(text, color)
      local range = text + 0
      local rangeSq = range * range
      -- log("piece at " .. printTable(lastPiecePick.solutionPosition, true))

      local dumpOrigin = focusedObj.getPosition()

      Player[color].clearSelectedObjects()

      local targetPos = lastPiecePick.solutionPosition
      local count = 0
      for i, piece in ipairs(getAllPieces()) do
        local distSq = math.pow(piece.solutionPosition.x - targetPos.x, 2) + math.pow(piece.solutionPosition.z - targetPos.z, 2)
        if distSq <= rangeSq and not piece.object.locked then
          -- log("piece at " .. printTable(piece, true) .. " is " .. distSq .. " <= " .. rangeSq)
          -- piece.object.addToPlayerSelection(color)
          piece.object.setPosition({
            dumpOrigin.x + (math.random() - .5) * range,
            dumpOrigin.y + math.random() * range + 2,
            dumpOrigin.z + (math.random() - .5) * range,
          }, true)
          piece.object.setVelocity({0, math.random() * -.1, 0})
          count = count + 1
        end
      end

      broadcastToAll("Cheat: " .. Player[color].steam_name .. " gathered " .. count .. " piece(s).")
    end
  end
  board.addContextMenuItem("Cheat: Gather pieces", gatherPieces)


end

