
function alignPiecesByShape(origin, objects, allowRotate, horizontalOnly)
	local nubinfo = templateData[gameState.templateId].nubinfo

	if nubinfo == nil then
		return false
	end

  local spacing = getPieceSpacing(objects, true)
  local groups = {}

	--- numpy.roll(), but for 4 character strings
	function rotateString(shape, rot)
		local ret = ""
		for i=0, 3 do
			local idx = (i + rot) % 4 + 1
			ret = ret .. shape:sub(idx, idx)
		end
		return ret
	end

  for i, obj in ipairs(objects) do
		local id = getPieceId(obj)
    local shape = nubinfo[id] or "????"

    if #obj.getAttachments() > 0 then
      -- Don't try to arrange clusters
      shape = "____"
    end

		-- take into account the rotation
		local rot = (math.floor(-obj.getRotation().y / 90 + 4.5) + 2) % 4

		local currentShape = rotateString(shape, rot)

    if horizontalOnly then
      currentShape = "-" .. currentShape:sub(2, 2) .. "-" .. currentShape:sub(4, 4)
    end

    -- print("Shape is " .. shape .. " and spin is " .. obj.getRotation().y .. " so active shape is " .. currentShape)

		-- record result
    groups[currentShape] = groups[currentShape] or {}
    table.insert(groups[currentShape], obj)
  end

	if allowRotate then
		local targetGroups = {
			"oooo", "ooio", "oioi", "ooii",
			"oiii", "iiii", "??e?",
		}

    --- If any side is an edge piece, replaces all other parts of the group with "?", else returns false
    function maybeSingleEdgeGroup(g)
      if g:sub(1, 1) == "?" or g:sub(2, 2) == "?" then return false end

      if g:sub(1, 1) == "e" then return "e???"
      elseif g:sub(2, 2) == "e" then return "?e??"
      elseif g:sub(3, 3) == "e" then return "??e?"
      elseif g:sub(4, 4) == "e" then return "???e"
      else return false
      end
    end

		--- Returns how many steps to rotate a by to get b. false if you can't.
		function shapeCanRotate(a, b)
			if a == b then return 0 end
			for shift=1,3 do
				if rotateString(a, shift) == b then return shift end
			end
			return false
		end

    -- Move all pieces with at least one edge into special groups.
		for groupName, pieces in pairs(groups) do
      local newGroup = maybeSingleEdgeGroup(groupName)
      if newGroup ~= false then
        --print("Move " .. groupName .. " to " .. newGroup .. " pieces " .. #pieces)
        groups[newGroup] = groups[newGroup] or {}
        for _, piece in ipairs(pieces) do
          table.insert(groups[newGroup], piece)
        end
        groups[groupName] = {}
      end
    end

    -- Rotate pieces that are in targetGroups
		for groupName, pieces in pairs(groups) do
			local rot = false
			local transferGroup = nil
      
			-- Check to see if there's a targetGroup we can rotate this group into:
			for _, targetGroup in ipairs(targetGroups) do
				rot = shapeCanRotate(groupName, targetGroup)
				if rot ~= false then
					transferGroup = targetGroup
					break
				end
			end

			if rot == 0 then
				-- We are the target group, no-op
			elseif rot ~= false then
				-- We can rotate this to match a the target group ("transferGroup")
				groups[transferGroup] = groups[transferGroup] or {}
				groups[groupName] = {}

				-- Spin pieces and move them to the other group
				for _, piece in ipairs(pieces) do
					local spin = piece.getRotation().y
					spin = spin + -rot * 90

					piece.setRotationSmooth(Vector(0, spin, 0), false, true)
					table.insert(groups[transferGroup], piece)
				end
			end
		end
	end

	-- determine what order to arrange them
	local groupList = {}
	for name, _ in pairs(groups) do table.insert(groupList, name) end
	table.sort(groupList, function(a, b) return a > b end)

	-- Arrange
  local row = 0
  for _, groupName in ipairs(groupList) do
    -- print("Row " .. row .. " is " .. groupName .. " with " .. #groups[groupName])
    for i, obj in ipairs(groups[groupName]) do
      setPieceCenter(obj, {origin.x + (i - 1) * spacing, origin.y, origin.z - row * spacing}, false)
    end

		if #groups[groupName] > 0 then row = row + 1 end
  end

	return true
end

function addObjectsActions()
  for index, object in ipairs(getObjects()) do
    if getPiece(object) then
      addPieceActions(object)
    elseif isBoard(object) then
      addBoardActions(object)
    end
  end
end

function addPieceActions(obj)

  function squareAlign(color, pos, focusedObj)
    local objects = Player[color].getSelectedObjects()
    inplaceShuffle(objects)

    local helper = getOverlapHelper(objects)
    helper.setOriginByObject(focusedObj)
    local width = math.ceil(math.sqrt(helper.piecesArea))

    local i = 0
    local placementStepper = function()
      i = i + 1
      return {x = (i - 1) % width, z = math.floor((i - 1) / width)}
    end
    helper.placePieces(objects, placementStepper)
  end
  obj.addContextMenuItem("Arrange: Square", squareAlign)

  function rectangleAlign(color, pos, focusedObj)
    local objects = Player[color].getSelectedObjects()
    inplaceShuffle(objects)

    local helper = getOverlapHelper(objects)
    helper.setOriginByObject(focusedObj)
    -- Target a rough aspect ratio
    local ratio = 5 / 1
    local width = math.ceil(math.sqrt(ratio * helper.piecesArea))
    -- print("Rect size for " .. helper.piecesArea .. " is " .. width)

    local i = 0
    local placementStepper = function()
      i = i + 1
      return {x = (i - 1) % width, z = math.floor((i - 1) / width)}
    end
    helper.placePieces(objects, placementStepper)
  end
  obj.addContextMenuItem("Arrange: Rectangle", rectangleAlign)

	-- Only supported on square puzzles:
	if (templateData[gameState.templateId].shape or "square") == "square" then
		function noNubinfoApologize(player)
			player.showInfoDialog("Sorry, nub/tab data isn't available.")
		end
		function shapeAlign(color, pos, focusedObj)
			local objects = Player[color].getSelectedObjects()
			inplaceShuffle(objects)
			local ret = alignPiecesByShape(focusedObj.getPosition(), objects, false, false)
			if ret == false then noNubinfoApologize(Player[color]) end
		end
		obj.addContextMenuItem("Arrange: By Shape", shapeAlign)

		function shapeSpinAlign(color, pos, focusedObj)
			local objects = Player[color].getSelectedObjects()
			inplaceShuffle(objects)

			local ret = alignPiecesByShape(focusedObj.getPosition(), objects, true, false)
			if ret == false then noNubinfoApologize(Player[color]) end
		end
		obj.addContextMenuItem("Arr & Rot: By Shape", shapeSpinAlign)

		function shapeLeftRightAlign(color, pos, focusedObj)
			local objects = Player[color].getSelectedObjects()
			inplaceShuffle(objects)

			local ret = alignPiecesByShape(focusedObj.getPosition(), objects, false, true)
			if ret == false then noNubinfoApologize(Player[color]) end
		end
		obj.addContextMenuItem("Arrange: Left/Right", shapeLeftRightAlign)
	end

  function gridAlign(color, pos, focusedObj)
    local objects = Player[color].getSelectedObjects()

    local helper = getOverlapHelper(objects)
    local origin = Vector(pos)
    helper.setOrigin(origin)
    local spacing = helper.spacing

    --debugDrawPointMarker(pos, {0, 0, 0})

    for i, obj in ipairs(objects) do
      local bounds = getVisualBoundsWorld(obj)
      p = {x = bounds.edges.x0, z = bounds.edges.z1}
      --debugDrawPointMarker(Vector(p.x, 1.1, p.z), {0, 1, 0})
      p.x = math.floor((p.x - origin.x) / spacing + .5)
      p.z = math.floor((p.z - origin.z) / spacing + .5)
      helper.placePiece(obj, p.x, -p.z)
      -- setPieceCenter(obj, p, false)
    end
  end
  obj.addContextMenuItem("Align: Local grid", gridAlign)

  function solveRotate(color, pos, focusedObj)
    local objects = Player[color].getSelectedObjects()

    for i, obj in ipairs(objects) do
      local piece = getPiece(obj)
      if piece then
        obj.setRotationSmooth(piece.solutionRotation)
      end
    end

    broadcastToAll("Cheat: " .. Player[color].steam_name .. " rotated " .. #objects .. " piece(s) the right way.")
  end
  obj.addContextMenuItem("Cheat: Rotate Solved", solveRotate)

  function solveOrdering(color, pos, focusedObj)
    local objects = Player[color].getSelectedObjects()
		table.sort(objects, function(a, b)
			return getPieceId(a) - getPieceId(b) < 0
		end)

    local helper = getOverlapHelper(objects)
    helper.setOriginByObject(focusedObj)
    local width = math.ceil(math.sqrt(helper.piecesArea))
    -- the overlap helper will mess up the ordering, just make a mess with bigger pieces

    for i, obj in ipairs(objects) do
      helper.forcePlacePiece(obj, (i - 1) % width, math.floor((i - 1) / width))
    end

    broadcastToAll("Cheat: " .. Player[color].steam_name .. " sorted " .. #objects .. " piece(s) to the puzzle order.")
  end
  obj.addContextMenuItem("Cheat: Puzzle Order", solveOrdering)
end

function addBoardActions(board)
  function changeTableColor(color, pos, focusedObj)
    function colorPicked(pickedColor, playerColor)
      for i, obj in pairs(tableSurfaces) do
        local settings = obj.getCustomObject()
        settings.diffuse = ""
        obj.setCustomObject(settings)

        obj.setColorTint(pickedColor)

        tableSurfaces[i] = obj.reload()
        tableSurfaces[i].interactable = false
      end
    end
    Player[color].showColorDialog(tableSurfaces[0].getColorTint(), colorPicked)
  end
  board.addContextMenuItem("Change table color", changeTableColor)


  function gatherEdges(color, pos, focusedObj)
    Player[color].clearSelectedObjects()

    local dumpOrigin = focusedObj.getPosition()
    local range = math.sqrt(#templateData[gameState.templateId].pieces) / 3

    for pieceId, info in pairs(templateData[gameState.templateId].pieces) do
      if #info.neighbors <= 5 and gameState.pieces[pieceId].joinedTo == nil then
        local piece = getPiece(pieceId)
        if piece and piece.object ~= nil and piece.object.locked == false then
          piece.object.setPosition({
            dumpOrigin.x + (math.random() - .5) * range,
            dumpOrigin.y + math.random() * range + 2,
            dumpOrigin.z + (math.random() - .5) * range,
          }, true)
        end
      end
    end

    broadcastToAll("Cheat: " .. Player[color].steam_name .. " gathered edges.")
  end
  board.addContextMenuItem("Cheat: Gather edges", gatherEdges)

  local lastPiecePick = nil
  function gatherPieces(color, pos, focusedObj)
    -- todo: may only work right for rectangular puzzles
    local player = Player[color]


    --Try to figure out where on the puzzle they clicked
    -- `pos` only seems to give us the center of the thing we right-clicked on
    --Look at the mouse pointer?
    --Wait, no, it's not useful because the pointer is already not where they opened the context menu,
    --but where they clicked on the menu.
    --[[
    local pointerPos = player.getPointerPosition()
    local bounds = focusedObj.getBoundsNormalized()
    bounds.left = bounds.center.x - bounds.size.x / 2
    bounds.right = bounds.center.x + bounds.size.x / 2
    bounds.far = bounds.center.z + bounds.size.z / 2
    bounds.near = bounds.center.z - bounds.size.z / 2

    local puzzlePos = {
      x = (pointerPos.x - bounds.left) / bounds.size.x,
      y = (pointerPos.z - bounds.near) / bounds.size.z,
    }

    log("Pointer is at " .. printTable(pointerPos, true))
    log("Bounds are " .. printTable(bounds, true))
    log("puzzlePos " .. printTable(puzzlePos, true))
    log("pos " .. printTable(pos, true))
    debugDrawLine({
      points = {pos, {pos.x, pos.y + 5, pos.z}},
      color = {1, 0, 0},
      thickness = .1,
    })
    --]]

    local bounds = focusedObj.getBounds()

    local hits = Physics.cast({
      origin = bounds.center,
      direction = focusedObj.getTransformUp(),
      type = 3,--box
      size = bounds.size,
      -- debug = true,
    })

    local piece = nil
    for i, hit in ipairs(hits) do
      if getPiece(hit.hit_object) then
        piece = getPiece(hit.hit_object)
      end
    end

    if not piece then
      player.showInfoDialog("Place a piece on top of the puzzle")
    else
      lastPiecePick = piece
      -- log("regarding piece at " .. printTable(lastPiecePick.solutionPosition, true))
      player.showInputDialog("Collect how far from this piece? (Try again if it doens't work the first time.)", "10", countConfirmed)
    end

    function countConfirmed(text, color)
      local range = text + 0
      local rangeSq = range * range
      -- log("piece at " .. printTable(lastPiecePick.solutionPosition, true))

      local dumpOrigin = focusedObj.getPosition()

      Player[color].clearSelectedObjects()

      local targetPos = lastPiecePick.solutionPosition
      local count = 0
      for i, piece in ipairs(getAllPieces()) do
        local distSq = math.pow(piece.solutionPosition.x - targetPos.x, 2) + math.pow(piece.solutionPosition.z - targetPos.z, 2)
        if distSq <= rangeSq and not piece.object.locked then
          -- log("piece at " .. printTable(piece, true) .. " is " .. distSq .. " <= " .. rangeSq)
          -- piece.object.addToPlayerSelection(color)
          piece.object.setPosition({
            dumpOrigin.x + (math.random() - .5) * range,
            dumpOrigin.y + math.random() * range + 2,
            dumpOrigin.z + (math.random() - .5) * range,
          }, true)
          piece.object.setVelocity({0, math.random() * -.1, 0})
          count = count + 1
        end
      end

      broadcastToAll("Cheat: " .. Player[color].steam_name .. " gathered " .. count .. " piece(s).")
    end
  end
  board.addContextMenuItem("Cheat: Gather pieces", gatherPieces)


end

