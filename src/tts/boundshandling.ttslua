

-- Returns a practical spacing to use between the given pieces
function getPieceSpacing(objects, includeHeight)
  return 1.6

  -- local spacing = 1

  -- for i, obj in ipairs(objects) do
  --   local bounds = getVisualBoundsWorld(obj)
  --   spacing = math.max(spacing, bounds.size.x)
  --   if includeHeight == true then
  --     spacing = math.max(spacing, bounds.size.z)
  --   end
  -- end

  -- return spacing + .1
end

--- Moves the visual bounds center of the given piece to the given point.
function setPieceCenter(obj, pos, fast)
  local bounds = getVisualBoundsWorld(obj)

  pos = Vector(pos)
  pos.x = pos.x + bounds.offset.x
  pos.z = pos.z + bounds.offset.z

  obj.setPositionSmooth(pos, fast)
end

-- Helper for placing pieces on a local grid and trying not to put groups of pieces on top of each other.
function getOverlapHelper(objects)
  local origin = objects[1].getPosition()
  local spacing = getPieceSpacing(objects, true)

  -- In this area we'll treat a piece at grid position x as the topleft-most piece in the cluster
  -- is at the  grid position (projected into the world).
  -- x+ is right, z+ is towards the user

  --array of {x1, z1, x2, z2} rects that we've already put pieces in
  local usedBounds = {}

  local objectInfo = {}

  local handler

  function movePiece(object, x, z)
    local cluster = objectInfo[object]
    -- debugDrawBounds(objectBounds, {1, 1, 0})

    -- put the top-left corner of the object at the grid position
    local pos = Vector({x * spacing + origin.x, origin.y, -z * spacing + origin.z})
    -- debugDrawPointMarker(pos, {0, 1, 0})
    -- account for size and off-center origin
    pos.x = pos.x + cluster.bounds.offset.x + cluster.bounds.size.x / 2
    pos.z = pos.z + cluster.bounds.offset.z - cluster.bounds.size.z / 2

    -- also account for nominal cluster size not being the same as the actual cluster size
    pos.x = pos.x - (cluster.bounds.size.x - cluster.pieceWidth) / 2
    pos.z = pos.z + (cluster.bounds.size.z - cluster.pieceHeight) / 2

    object.setPositionSmooth(pos, false)
  end


  handler = {
    piecesArea = -1,

    spacing = spacing,

    -- Provide a function that returns possible piece positions when called
    -- return {x: column, z: row}
    -- placementStepper = nil,

    setOrigin = function(p) origin = Vector(p) end,
    setOriginByObject = function(object)
      local objectBounds = getVisualBoundsWorld(object)
      origin = Vector({objectBounds.edges.x0, objectBounds.center.y, objectBounds.edges.z1})

      -- debugDrawPointMarker(origin, {0, 0, 0})
    end,
    targetObjects = function(objects)
      objectInfo = {}
      handler.piecesArea = 0
      for i, object in ipairs(objects) do
        local cluster = getClusterInfo(object)
        handler.piecesArea = handler.piecesArea + cluster.piecesArea
        objectInfo[object] = cluster
      end
    end,
    -- returns x/z min/max in world space if the piece were placed at the given grid position
    -- if the pieces were exactly their cluster size
    getEdgesFor = function(object, x, z)
      local cluster = objectInfo[object]
      return {
        x1 = x * spacing + origin.x,
        x2 = x * spacing + cluster.pieceWidth + origin.x,
        z2 = -z * spacing + origin.z,
        z1 = -z * spacing - cluster.pieceHeight + origin.z,
      }
    end,
    isSpaceFree = function(object, x, z)
      local me = handler.getEdgesFor(object, x, z)

      for i, used in ipairs(usedBounds) do
        if
          me.x1 < used.x2 and me.x2 > used.x1 and
          me.z1 < used.z2 and me.z2 > used.z1
        then
          -- debugDrawEdges(me, {1, 0, 0})
          return false
        end
      end
      return true
    end,
    tryPlacePiece = function(object, x, z)
      if handler.isSpaceFree(object, x, z) then
        local edges = handler.getEdgesFor(object, x, z)
        movePiece(object, x, z)
        table.insert(usedBounds, edges)
        -- debugDrawEdges(edges, {0, 1, 0})

        return true
      else
        return false
      end
    end,
    --- Puts the piece there even if it will overlap
    forcePlacePiece = function(object, x, z)
      local objectBounds = objectInfo[object].bounds
      movePiece(object, x, z)
      table.insert(usedBounds, handler.getEdgesFor(object, x, z))
    end,
    --- Puts the piece there, trying nearby if it will overlap
    placePiece = function(object, x, z)
      local objectBounds = objectInfo[object].bounds
      -- debugDrawBounds(objectBounds, {1, 1, 0})
      -- debugDrawEdges(handler.getEdgesFor(objectBounds, 0, 0), {1, .5, 0})

      -- Try to find a place it fits and put it there
      for zShim = 0, 5 do
        for xShim = 0, 5 do
          if handler.tryPlacePiece(object, x + xShim, z + zShim) then
            return
          end
        end
      end
      for zShim = -1, -5, -1 do
        for xShim = -1, -5, -1 do
          if handler.tryPlacePiece(object, x + xShim, z + zShim) then
            return
          end
        end
      end

      -- Failed to find a spot, give up
      print("Overlap handler failed to find somewhere to put a piece")
      movePiece(object, x, z)
    end,
    placePieces = function(objects, placementStepper)
      -- Sort with biggest pieces first
      local orderedObjects = {}
      for _, obj in ipairs(objects) do table.insert(orderedObjects, obj) end
      function objCmp(a, b)
        return objectInfo[a].piecesArea > objectInfo[b].piecesArea
      end
      table.sort(orderedObjects, objCmp)

      -- Step through placementStepper and place pieces
      for _, obj in ipairs(orderedObjects) do
        while true do
          local pos = placementStepper()
          if handler.tryPlacePiece(obj, pos.x, pos.z) then
            -- it fit
            break
          end
        end
      end

    end

  }

  handler.targetObjects(objects)

  return handler
end

